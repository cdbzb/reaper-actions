/**
 * ReaScript Name: Template Title (match file name without extension and author)
 * Description: A template script for REAPER ReaScript.
 * Instructions: Here is how to use it. (optional)
 * Author: X-Raym
 * Author URl: http://extremraym.com
 * Repository: GitHub > X-Raym > EEL Scripts for Cockos REAPER
 * Repository URl: https://github.com/X-Raym/REAPER-EEL-Scripts
 * File URl: https://github.com/X-Raym/REAPER-EEL-Scripts/scriptName.eel
 * Licence: GPL v3
 * Forum Thread: Script: Script name
 * Forum Thread URl: http://forum.cockos.com/***.html
 * Version: 1.2.1
 * Version Date: YYYY-MM-DD
 * REAPER: 4.76
 * Extensions: SWS/S&M 2.6.0 (optional)
 */
 
/**
 * Changelog:
 * v1.3.2 (2015-03-14)
 	# more infos for items loop
 * v1.3.1 (2015-02-20)
 	# loops takes bug fix
 * v1.3 (2015-02-19)
	+ Instructions header field
	+ Get and Set parameters for items
	+ Get and Set parameters for takes
 * v1.2.1 (2015-02-17)
	# loops indentation
 * v1.2 (2015-02-13)
	+ Items, Takes, Tracks, Regions and FX loops
	# Underscore variables
 * v1.1 (2015-02-15)
	+ Basic scripts actions template
 * v1.0 (2015-01-09)
	+ Initial Release
	+ New functions
	- Deleted functions
	# Updated functions
 */

// ----- DEBUGGING ====>
@import ../Functions/X-Raym_Functions - console debug messages.eel

debug = 1; // 0 => No console. 1 => Display console messages for debugging.
clean = 1; // 0 => No console cleaning before every script execution. 1 => Console cleaning before every script execution.

msg_clean();
// <==== DEBUGGING -----

function main() // local (i, j, item, take, track)
(
	Undo_BeginBlock(); // Begining of the undo block. Leave it at the top of your main function.

	// YOUR CODE BELOW

	// LOOP THROUGH SELECTED ITEMS
	/*
	selected_items_count = CountSelectedMediaItems(0);
	
	i = 0; // INITIALIZE loop through selected items
	loop(selected_items_count, (item = GetSelectedMediaItem(0, i)) ? (
			// GET INFOS
			value_get = GetMediaItemInfo_Value(item, "D_VOL"); // Get the value of a the parameter
			B_MUTE : bool * to muted state
			B_LOOPSRC : bool * to loop source
			B_ALLTAKESPLAY : bool * to all takes play
			B_UISEL : bool * to ui selected
			C_BEATATTACHMODE : char * to one char of beat attached mode, -1=def, 0=time, 1=allbeats, 2=beatsosonly
			C_LOCK : char * to one char of lock flags (&1 is locked, currently)
			D_VOL : double * of item volume (volume bar)
			D_POSITION : double * of item position (seconds)
			D_LENGTH : double * of item length (seconds)
			D_SNAPOFFSET : double * of item snap offset (seconds)
			D_FADEINLEN : double * of item fade in length (manual, seconds)
			D_FADEOUTLEN : double * of item fade out length (manual, seconds)
			D_FADEINLEN_AUTO : double * of item autofade in length (seconds, -1 for no autofade set)
			D_FADEOUTLEN_AUTO : double * of item autofade out length (seconds, -1 for no autofade set)
			C_FADEINSHAPE : int * to fadein shape, 0=linear, ...
			C_FADEOUTSHAPE : int * to fadeout shape
			I_GROUPID : int * to group ID (0 = no group)
			I_LASTY : int * to last y position in track (readonly)
			I_LASTH : int * to last height in track (readonly)
			I_CUSTOMCOLOR : int * : custom color, windows standard color order (i.e. RGB(r,g,b)|0x100000). if you do not |0x100000, then it will not be used (though will store the color anyway)
			I_CURTAKE : int * to active take
			IP_ITEMNUMBER : int, item number within the track (read-only, returns the item number directly)
			F_FREEMODE_Y : float * to free mode y position (0..1)
			F_FREEMODE_H : float * to free mode height (0..1)
			
			// MODIFY INFOS
			value_set = value_get; // Prepare value output
			
			// SET INFOS
			SetMediaItemInfo_Value(item, "D_VOL", value_set); // Set the value to the parameter
		); // ENDIF inside loop selected items
		i += 1; // INCREMENT loop through selected items
	); // ENDLOOP through selected items
	*/

	// LOOP THROUGH SELECTED TAKES
	/*
	selected_items_count = CountSelectedMediaItems(0);

	i = 0; // INITIALIZE loop through selected items
	loop(selected_items_count, (item = GetSelectedMediaItem(0, i)) ? (
			(take = GetActiveTake(item)) ? (
				// GET INFOS
				value_get = GetMediaItemTakeInfo_Value(take, "D_VOL"); // Get the value of a the parameter
				// "D_VOL"
				// "D_PAN"
				// "D_PLAYRATE"
				// "D_PITCH", Ge
				// "I_CHANMODE"
				// "D_STARTOFFS"
				// "D_PANLAW"
				// MODIFY INFOS
				value_set = value_get; // Prepare value output
				// SET INFOS
				SetMediaItemTakeInfo_Value(take, "D_VOL", value_set); // Set the value to the parameter
			); // ENDIF active take
		); // ENDIF inside loop selected items
		i += 1; // INCREMENT loop through selected items
	); // ENDLOOP through selected items
	*/

	// LOOP TRHOUGH SELECTED TRACKS
	/*
	selected_tracks_count = CountSelectedTracks(0);

	i = 0; // INITIALIZE loop through selected tracks
	loop(selected_tracks_count, (track = GetSelectedTrack(0, i)) ? (
			// ACTIONS
		); // ENDIF inside loop
		i += 1; // INCREMENT loop through selected tracks
	); // ENDLOOP through selected tracks


	// LOOP THROUGH REGIONS
	/*
	i = 0; // INITIALIZE loop through regions

	while (EnumProjectMarkers(i, is_region, region_start, region_end, #name, region_id)) (    
		is_region === 1 ? (
			// ACTIONS	
		);
		i += 1; // INCREMENT loop through regions
	); // ENDWHILE loop through regions
	*/


	// LOOP TRHOUGH FX - by HeDa
	/*
	tracks_count = CountTracks(0);

	i=0; // INITIALIZE track loop
	loop (tracks_count, // loop for all tracks
			
		track = GetTrack(0, i);	// which track
		track_FX_count = TrackFX_GetCount(tracki); // count number of FX instances on the track
		
		i=0; // INITIALIZE FX loop
		loop (track_FX_count,	// loop for all FX instances on each track
			// ACTIONS
			i+=1; // INCREMENT FX loop						
		); // ENDLOOP FX loop
		
		i+=1; // INCREMENT tracks loop
	); // ENDLOOP tracks loop
	*/

	// YOUR CODE ABOVE

	Undo_EndBlock("My action", 0); // End of the undo block. Leave it at the bottom of your main function.
);

msg_start(); // Display characters in the console to show you the begining of the script execution.

main(); // Execute your main function

UpdateArrange(); // Update the arrangement (often needed)

msg_end(); // Display characters in the console to show you the end of the script execution.